---

- name: Format the disks ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_partition }} /dev/{{ item }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0
  loop: "{{ lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) }}"

- name: Create LVM physical volumes ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_pvcreate }} /dev/{{ item }}1
  when: >
    lvm_extend_disks.stdout_lines | length > 0
  loop: "{{ lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) }}"

- name: Check if the LVM volume group exists
  shell: "{{ lvm_extend_cmd_detect_vg }}"
  when: >
    lvm_extend_disks.stdout_lines | length > 0
  failed_when: false
  changed_when: false
  register: lvm_extend_vg_exists

- name: Create LVM volume group ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_vgcreate }} {{ lvm_extend_vg.key }} /dev/{{ lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | join('1 /dev/') }}1
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc > 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0

- name: Extend LVM volume group ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_vgextend }} {{ lvm_extend_vg.key }} /dev/{{ item }}1
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc == 0 and
    item in lvm_extend_vg.value.disks
  loop: "{{ lvm_extend_disks.stdout_lines }}"

- name: Create LVM logical volumes with specified size ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_lvcreate }}
    -n {{ item.name }}
    -L {{ item.size }}
    {{ lvm_extend_vg.key }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc > 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    'size' in item and
    item.size != None
  loop: "{{ lvm_extend_vg.value.vols }}"

- name: Create LVM logical volumes without size to fill the rest of the space ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_lvcreate }}
    -n {{ item.name }}
    -l 100%FREE
    {{ lvm_extend_vg.key }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc > 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    ('size' not in item or
    item.size == None)
  loop: "{{ lvm_extend_vg.value.vols }}"

- name: Extend LVM logical volumes with specified size ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_lvextend }}
    --size {{ item.size }}
    /dev/{{ lvm_extend_vg.key }}/{{ item.name }} {{
    item.pv | default('/dev/' + (lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | join('1 /dev/')) + '1') }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc == 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    'size' in item and
    item.size != None
  loop: "{{ lvm_extend_vg.value.vols }}"

- name: Extend LVM logical volume without size to fill the rest of the space ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_lvextend }}
    /dev/{{ lvm_extend_vg.key }}/{{ item.name }} {{
    item.pv | default('/dev/' + (lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | join('1 /dev/')) + '1') }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc == 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    ('size' not in item or
    item.size == None)
  loop: "{{ lvm_extend_vg.value.vols }}"

- name: Create or resize filesystem - swap type ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_swapoff }} /dev/{{ lvm_extend_vg.key }}/{{ item.name }} || true &&
    {{ lvm_extend_cmd_mkswap }} -f /dev/{{ lvm_extend_vg.key }}/{{ item.name }} &&
    {{ lvm_extend_cmd_swapon }} /dev/{{ lvm_extend_vg.key }}/{{ item.name }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc >= 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    'type' in item and
    item.type == 'swap'
  loop: "{{ lvm_extend_vg.value.vols }}"

- name: Create filesystem - non-swap type ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_create[item.type | default(lvm_extend_default_fs_type)] }}
    /dev/{{ lvm_extend_vg.key }}/{{ item.name }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc > 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    (item.type | default(lvm_extend_default_fs_type)) in lvm_extend_cmd_grow
  loop: "{{ lvm_extend_vg.value.vols }}"

- name: Get mountpoint names - non-swap type ({{ lvm_extend_vg.key }})
  shell: >
    {{ lvm_extend_cmd_mountpoint % (lvm_extend_vg.key, item.name) }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc == 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    (item.type | default(lvm_extend_default_fs_type)) in lvm_extend_cmd_grow
  loop: "{{ lvm_extend_vg.value.vols }}"
  changed_when: false
  failed_when: false
  register: lvm_extend_data_mntpoint_names

- name: Resize filesystem - non-swap type ({{ lvm_extend_vg.key }})
  shell: >
    {{
        lvm_extend_cmd_grow[item.type | default(lvm_extend_default_fs_type)] ~ ' ' ~ lvm_extend_data_mntpoint_names.results[lvm_extend_idx].stdout
          if item.type | default(lvm_extend_default_fs_type) == 'xfs'
          else
        lvm_extend_cmd_grow[item.type | default(lvm_extend_default_fs_type)] ~ ' /dev/' ~ lvm_extend_vg.key ~ '/' ~ item.name
    }}
  when: >
    lvm_extend_disks.stdout_lines | length > 0 and
    lvm_extend_vg_exists is defined and
    lvm_extend_vg_exists.rc == 0 and
    lvm_extend_vg.value.disks | intersect(lvm_extend_disks.stdout_lines) | length > 0 and
    (item.type | default(lvm_extend_default_fs_type)) in lvm_extend_cmd_grow
  loop: "{{ lvm_extend_vg.value.vols }}"
  loop_control:
    index_var: lvm_extend_idx

- name: Check if the data mount point exists ({{ lvm_extend_vg.key }})
  stat:
    path: /dev/{{ lvm_extend_vg.key }}/{{ item.name }}
  loop: "{{ lvm_extend_vg.value.vols }}"
  register: lvm_extend_data_mntpoint_exists
  tags:
    - lvm_extend_mount

- name: Mount volume ({{ lvm_extend_vg.key }})
  mount:
    name: "{{ item.mount.dir | default('/mnt/' + item.name) }}"
    src: /dev/{{ lvm_extend_vg.key }}/{{ item.name }}
    fstype: "{{ item.mount.fstype | default(
      'ext4'
        if ((item.type | default(lvm_extend_default_fs_type)) == 'ext')
        else
      lvm_extend_default_fs_type) }}"
    opts: "{{ item.mount.opts | default(lvm_extend_mount_opts) }}"
    state: mounted
  when: >
    'mount' in item and
    item.name | in_loop_list(lvm_extend_data_mntpoint_exists, ['name'])
  loop: "{{ lvm_extend_vg.value.vols }}"
  tags:
    - lvm_extend_mount

- name: Change permissions of the mount point ({{ lvm_extend_vg.key }})
  file:
    path: "{{ item.mount.dir | default('/mnt/' + item.name) }}"
    state: directory
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
  when: >
    'mount' in item and
    (
        'owner' in item or
        'group' in item or
        'mode' in item
    )
  loop: "{{ lvm_extend_vg.value.vols }}"
  tags:
    - lvm_extend_mount
